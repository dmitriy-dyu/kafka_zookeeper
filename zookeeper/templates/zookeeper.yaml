---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.zk }}-svc
  labels:
    app: {{ .Values.app.zk }}-svc
spec:
  ports:
  - port: {{ .Values.app.portZkClient }}
    name: client
  - port: {{ .Values.app.portZkServer }}
    name: server
  - port: {{ .Values.app.portLeaderElection }}
    name: leader-election
  clusterIP: None
  selector:
    app: {{ .Values.app.zk }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.app.zk }}-cm
data:
  jvm.heap: "{{ .Values.configMap.jvmHeap }}"
  tick: "{{ .Values.configMap.tick }}"
  init: "{{ .Values.configMap.init }}"
  sync: "{{ .Values.configMap.sync }}"
  client.cnxns: "{{ .Values.configMap.clientCnxns }}"
  snap.retain: "{{ .Values.configMap.snapRetain }}"
  purge.interval: "{{ .Values.configMap.purgeInterval }}"
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ .Values.app.zk }}-pdb
spec:
  selector:
    matchLabels:
      app: {{ .Values.app.zk }}
  minAvailable: {{ .Values.app.pdb }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.app.zk }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.app.zk }}
  serviceName: {{ .Values.app.zk }}-svc
  replicas: {{ .Values.app.replicas }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.zk }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values: 
                    - {{ .Values.app.zk }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: {{ .Values.app.zk }}
        imagePullPolicy: Always
        image: {{ .Values.imageName }}
        resources:
          requests:
            memory: "{{ .Values.app.resources.requests.memory }}"
            cpu: "{{ .Values.app.resources.requests.cpu }}"
        ports:
        - containerPort: {{ .Values.app.portZkClient }}
          name: client
        - containerPort: {{ .Values.app.portZkServer }}
          name: server
        - containerPort: {{ .Values.app.portLeaderElection }}
          name: leader-election
        env:
        - name : ZK_ENSEMBLE
          value: "{{ .Values.app.zk }}-0"
        - name: ZK_CLIENT_PORT
          value: "{{ .Values.app.portZkClient }}"        
        - name: ZK_ELECTION_PORT
          value: "{{ .Values.app.portLeaderElection }}"
        - name : ZK_REPLICAS
          value: "{{ .Values.app.replicas }}"
        - name : ZK_HEAP_SIZE
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: jvm.heap
        - name : ZK_TICK_TIME
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: tick
        - name : ZK_INIT_LIMIT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: init
        - name : ZK_SYNC_LIMIT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: tick
        - name : ZK_MAX_CLIENT_CNXNS
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: client.cnxns
        - name: ZK_SNAP_RETAIN_COUNT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: snap.retain
        - name: ZK_PURGE_INTERVAL
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: purge.interval        
        command:
        - sh
        - -c
        - zkGenConfig.sh && zkServer.sh start-foreground
        readinessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
      securityContext:
        runAsUser: {{ .Values.app.securityContext.id }}
        fsGroup: {{ .Values.app.securityContext.id }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.app.vollumeStorage }}
